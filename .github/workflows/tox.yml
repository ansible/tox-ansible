name: tox

on:
  create:  # is used for publishing to PyPI and TestPyPI
    tags:  # any tag regardless of its name, no branches
      - "**"
  push:  # only publishes pushes to the main branch to TestPyPI
    branches:  # any integration branch but not tag
      - "main"
      - "v1"
  pull_request:
  release:
    types:
      - published  # It seems that you can publish directly without creating
      - prereleased
  schedule:
    - cron: 1 0 * * *  # Run daily at 0:01 UTC

jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
      - name: run lint
        run: |
          python3 -m pip install -U tox
          python3 -m tox -e lint

  packaging:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: run packaging
        run: |
          python3 -m pip install -U tox
          python3 -m tox -e packaging

  test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: py36
            tox_env: py36
            os: ubuntu-20.04
            python-version: "3.6"
          - name: py37
            tox_env: py37
            os: ubuntu-20.04
            python-version: "3.7"
          - name: py38
            tox_env: py38
            os: ubuntu-20.04
            python-version: "3.8"
          - name: py39
            tox_env: py39
            os: ubuntu-20.04
            python-version: "3.9"
          - name: py310
            tox_env: py310
            os: ubuntu-20.04
            python-version: "3.10"
          - name: py311
            tox_env: py311
            os: ubuntu-20.04
            python-version: "3.11"
          - name: py38@macos
            tox_env: py38
            os: macOS-latest
            python-version: 3.8
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - name: run test
        run: |
          python3 -m pip install "tox<4.0"
          python3 -m tox -e ${{ matrix.tox_env }}
        env:
          COVERAGE_FILE: .coverage.${{ matrix.python-version }}
      - name: upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-results
          path: .coverage.${{ matrix.python-version }}

  # Disabled until we can really start working on adding support for tox4
  # test-devel:
  #   needs: lint
  #   runs-on: ubuntu-20.04
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python: ["3.6"]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: run test (devel)
  #       run: |
  #         python -m pip install tox
  #         tox -e py$(printf "${{ matrix.version }}" | tr -d '.')-devel

  coverage:
    needs: test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          cache: pip
      - uses: actions/download-artifact@v3
        with:
          name: coverage-results
      - name: run coverage
        run: |
          python3 -m pip install tox codecov
          python3 -m tox -e coverage
          codecov -X pycov -X gcov
        env:
          CODECOV_TOKEN: ${{ secrets.codecov_token }}

  publish:
    needs:
      - coverage
      - lint
      - packaging
    if: startsWith(github.ref, 'refs/tags/')  # Only release during tags
    runs-on: ubuntu-20.04

    env:
      PY_COLORS: 1
      TOXENV: packaging

    steps:
      - name: Check out src from Git
        uses: actions/checkout@v3
        with:
          # Get shallow Git history (default) for release events
          # but have a complete clone for any other workflows.
          # Both options fetch tags but since we're going to remove
          # one from HEAD in non-create-tag workflows, we need full
          # history for them.
          fetch-depth: >-
            ${{
              (
                (
                  github.event_name == 'create' &&
                  github.event.ref_type == 'tag'
                ) ||
                github.event_name == 'release'
              ) &&
              1 || 0
            }}
      - name: Switch to using Python 3.9 by default
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: pip
      - name: Install tox
        run: python3 -m pip install --user tox
      - name: Drop Git tags from HEAD for non-tag-create and non-release events
        if: >-
          (
            github.event_name != 'create' ||
            github.event.ref_type != 'tag'
          ) &&
          github.event_name != 'release'
        run: >-
          git tag --points-at HEAD
          |
          xargs git tag --delete
      - name: Build dists
        run: python3 -m tox
      - name: Publish to test.pypi.org
        if: >-
          (
            github.event_name == 'push' &&
            github.ref == format(
              'refs/heads/{0}', github.event.repository.default_branch
            )
          ) ||
          (
            github.event_name == 'create' &&
            github.event.ref_type == 'tag'
          )
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.testpypi_password }}
          repository_url: https://test.pypi.org/legacy/
      - name: Publish to pypi.org
        if: >-  # "create" workflows run separately from "push" & "pull_request"
          github.event_name == 'release'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.pypi_password }}
