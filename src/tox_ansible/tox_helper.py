from os.path import abspath, isfile, join

import py
from tox.config import (  # pylint: disable=no-name-in-module
    DepOption,
    ParseIni,
    SectionReader,
    testenvprefix,
)

passenv_list = (
    # ansible-test does not work without HOME directory
    "HOME",
    # both ansible-test and molecule may fail to run if these are not passed:
    "DOCKER_HOST",
    "CONTAINER_HOST",
    "SSH_AUTH_SOCK",
)


class Tox(object):
    instance = None
    """A class that handles interacting with the specific internals of the tox
    world for the plugin."""

    def __new__(cls, *args):
        if cls.instance is None:
            cls.instance = super(Tox, cls).__new__(cls)
        return cls.instance

    def __init__(self, config=None):
        """Initialize this object

        :param config: the tox config object"""
        if config is not None:
            self.config = config

    def get_reader(self, section, prefix=None):
        """Creates a SectionReader and configures it with known and reasonable
        substitution values based on the config.

        :param section: Config section name to read from
        :param prefix: Any applicable prefix to the ini section name. Default
        None"""
        # pylint: disable=protected-access
        reader = SectionReader(section, self.config._cfg, prefix=prefix)
        distshare_default = join(str(self.config.homedir), ".tox", "distshare")
        reader.addsubstitutions(
            toxinidir=self.config.toxinidir,
            homedir=self.config.homedir,
            toxworkdir=self.config.toxworkdir,
        )
        self.config.distdir = reader.getpath(
            "distdir", join(str(self.config.toxworkdir), "dist")
        )
        reader.addsubstitutions(distdir=self.config.distdir)
        self.config.distshare = reader.getpath("distshare", distshare_default)
        reader.addsubstitutions(distshare=self.config.distshare)
        return reader

    @property
    def posargs(self):
        """Returns any configured posargs from the tox world"""
        return self.config.option.args

    @property
    def toxinidir(self):
        """Returns the configured toxinidir for working with base directory paths"""
        return self.config.toxinidir

    @property
    def opts(self):
        """Return the options as a dictionary-style object.

        :return: A dictionary of the command line options"""
        return vars(self.config.option)

    def add_envconfigs(self, tox_cases, options):
        """Modifies the list of envconfigs in tox to add any that were
        generated by this plugin.

        :param tox_cases: An iterable of test cases to create environments
        from"""
        # Stripped down version of parseini.__init__ for making a generated
        # envconfig
        prefix = "tox" if self.config.toxinipath.basename == "setup.cfg" else None
        reader = self.get_reader("tox", prefix=prefix)
        make_envconfig = ParseIni.make_envconfig
        skip_install = False
        # Python 2 fix
        make_envconfig = getattr(make_envconfig, "__func__", make_envconfig)

        if not isfile(join(self.config.toxinidir, "setup.py")) and not isfile(
            join(self.config.toxinidir, "pyproject.toml")
        ):
            skip_install = True

        # Store the generated ansible envlist
        self.config.ansible_envlist = []
        for tox_case in tox_cases:
            tox_case_name = tox_case.get_name(fmt=options.scenario_format)
            section = testenvprefix + tox_case_name
            # pylint: disable=protected-access
            config = make_envconfig(
                self.config, tox_case_name, section, reader._subs, self.config
            )
            config.tox_case = tox_case
            # We do not want to create new environments for each command we run
            config.envdir = py._path.local.LocalPath(abspath(join(".tox", "ansible")))

            if skip_install:
                config.skip_install = skip_install
            self.customize_envconfig(config, options)
            for v in passenv_list:
                if v not in config.passenv:
                    config.passenv.add(v)
            # We do not want to install packages
            config.skipsdist = True

            self.config.envconfigs[tox_case_name] = config
            self.config.ansible_envlist.append(tox_case_name)

    def customize_envconfig(self, config, options):
        """Writes the fields of the envconfig that need to be given default
        molecule related values.

        :param config: the constructed envconfig for this to customize"""
        tox_case = config.tox_case
        if not config.description:
            config.description = tox_case.description
        # We do not want to use commands from existing default environment
        # as these may likely be others tests. Generated environments will
        # have their own internal commands.
        config.commands = tox_case.get_commands(options)
        # Default deps to install molecule, etc
        do = DepOption()
        processed_deps = do.postprocess(config, tox_case.dependencies)
        if config.deps:
            processed_deps = config.deps + processed_deps
        config.deps = processed_deps
        # Cannot run in {toxinidir}, which is default
        if not config.envdir or config.envdir == self.config.toxinidir:
            config.envdir = self.config.toxworkdir.join("ansible")
        # Need to run molecule from the role directory
        if not config.changedir or config.changedir == self.config.toxinidir:
            config.changedir = py.path.local(tox_case.working_dir)
        if not config.basepython and tox_case.python is not None:
            config.basepython = tox_case.basepython

        if hasattr(config, "whitelist_externals"):
            allowlist = "whitelist_externals"
        else:
            allowlist = "allowlist_externals"
        if not getattr(config, allowlist):
            config.allowlist_externals = ["bash"]
